#include "../include/map_processing.h"
#include "../include/k-d_tree.h"
#include "../include/rrt_planner.h"
#include "ros/ros.h"
#include <iostream>

int main(int argc, char** argv) {
	//ros::init(argc, argv, "planning_yutian_node");
	//note that int argc and char** argv should be used as the main funciton input
	//otherwise the node init will mash up
	int test_int = 9;

  lmk_mapproc::MapData test;
	lmk_rrtplanning::RrtPlanner rrt_test;

  ros::init(argc, argv, "main_node_try");
	test.MapSubscriber(argc, argv);
	test_int = test.get_map_height();
	int map_width = test.get_map_length();
	//but standard library cout works.
	ROS_INFO("test int is %d", test_int);
	std::cout << test_int << "reallllllllyyyy??????" << std::endl;

	std::cout<< "start testing" << std::endl;
	std::vector<double> rand_config = rrt_test.random_configuration(map_length, test_int);
	std::cout<< rand_config[0] << rand_config[1] << rand_config[2] << std::endl;
	rand_config = rrt_test.random_configuration(map_length, test_int);
	std::cout<< rand_config[0] << rand_config[1] << rand_config[2] << std::endl;
	rand_config = rrt_test.random_configuration(map_length, test_int);
	std::cout<< rand_config[0] << rand_config[1] << rand_config[2] << std::endl;
  std::cout<< "finist testing" << std::endl;

	test.ROSMapOutput();
	test_int = test.get_map_length();
	//ROS_INFO is time stamped
	ROS_INFO("test int is %d", test_int);
	return 0;
}
